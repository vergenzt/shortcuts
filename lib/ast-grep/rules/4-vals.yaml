id: string-interps
language: jsonnet

rule:
  kind: object
  pattern: $X

rewriters:

- id: &1 val-string-lit
  rule:
    pattern: >-
      {
        Value: { string: $STR, },
        WFSerializationType: 'WFTextTokenString',
      }
  fix: >-
    sc.Str([$STR])

- id: &2 val-string-solo-var
  rule:
    pattern: >-
      {
        Value: {
          attachmentsByRange: {
            '{0, 1}': $REF
          },
          string: 'ï¿¼',
        },
        WFSerializationType: 'WFTextTokenString',
      }
  fix: >-
    sc.Str([$REF])

- id: &3 ref-input
  rule:
    pattern: >-
      {
        Type: 'ExtensionInput',
      }
  fix: >-
    sc.Input

- id: &4 ref-var
  rule:
    pattern: >-
      {
        Type: 'Variable',
        VariableName: '$NAME',
      }
  fix: >-
    sc.Ref('Vars.$NAME')

- id: &5 ref-att
  rule:
    pattern: >-
      {
        Value: $VAL,
        WFSerializationType: 'WFTextTokenAttachment',
      }
  fix: >-
    sc.Attach($VAL)

- id: &6 num
  rule:
    pattern: >-
      {
        Value: $VAL,
        WFSerializationType: 'WFNumberSubstitutableState',
      }
  fix: >-
    sc.Num($VAL)

# - id: dict-item
#   rule:
#     pattern: >-
#       {
#         WFItemType:
#       }

# - id: dict
#   rule:
#     pattern: >-
#       {
#         Value: {
#           WFDictionaryFieldValueItems: [
#             $$$ITEMS
#           ],
#         },
#         WFSerializationType: 'WFDictionaryFieldValue',
#       }
#   transform:
#     ITEMS_AS_DICT:
#       rewrite:
#         source: $$$ITEMS
#         rewriters:
#         - dict-item
#   fix: >-
#     sc.Dict({
#       $ITEMS_AS_DICT
#     })

transform:
  X_RE:
    rewrite:
      source: $X
      rewriters:
      - *1
      - *2
      - *3
      - *4
      - *5
      - *6

fix: >-
  $X_RE
